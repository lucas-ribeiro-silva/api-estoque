# 1. Nome do Workflow (Atualizado)
name: Java CI - Build, Teste Unitário e Teste E2E

# 2. Gatilho (Trigger)
on:
  push:
    branches: [ "main" ]

# 3. Tarefas (Jobs)
jobs:
  # Vamos renomear o job para ser mais claro
  build-and-run-e2e-tests:
    runs-on: ubuntu-latest

    # 4. Serviços (O banco de dados, como antes)
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: Password@123
          POSTGRES_DB: api_estoque_db
        ports:
          - 5432:5432 # A API vai encontrar o banco em 'localhost:5432'
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    # 5. Passos (Steps)
    steps:
      # Passo 1: Baixar o código da API (Projeto 1)
      - name: Checkout API Project (Projeto 1)
        uses: actions/checkout@v4

      # Passo 2: Configurar o Java 17
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      # Passo 3: Build e Teste Unitário da API
      # (Isso roda o 'ApiEstoqueApplicationTests' e cria o .jar)
      - name: Build and Unit Test API (Projeto 1)
        run: mvn -B clean install

      # ---- INÍCIO DAS NOVAS ETAPAS ----

      # Passo 4: Iniciar a API em segundo plano
      # (Usamos o '*' para pegar o .jar e '&' para rodar em background)
      - name: Run API in Background
        run: java -jar target/*.jar &

      # Passo 5: Esperar a API "levantar"
      # (Não podemos testar antes do Spring Boot iniciar)
      - name: Wait for API to be healthy
        run: |
          echo "Waiting for API..."
          # Damos 20s para o Spring Boot iniciar (pode ajustar)
          sleep 20 
          # Pingamos o endpoint de produtos 10x até ele responder
          curl --retry 10 --retry-delay 5 --retry-connrefused \
               -v http://localhost:8080/api/products
          echo "API is up and healthy!"

      # Passo 6: Baixar o Projeto de Testes de API (Projeto 2)
      - name: Checkout E2E Test Project (Projeto 2)
        uses: actions/checkout@v4
        with:
          # IMPORTANTE: Coloque o nome EXATO do seu repositório do Projeto 2
          repository: lucas-ribeiro-silva/api-estoque-tests
          # Diz ao GitHub para baixar este projeto em uma subpasta
          path: e2e-tests

      # Passo 7: Rodar os Testes de API (Projeto 2)
      - name: Run E2E API Tests (RestAssured)
        run: |
          # Entra na pasta do projeto de testes
          cd e2e-tests
          # Dá permissão de execução para o Maven Wrapper (necessário no Linux)
          chmod +x mvnw
          # Roda SÓ os testes de lógica (não precisamos do 'clean' aqui)
          ./mvnw test -Dtest=OrderLogicTests